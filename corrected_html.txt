// Replace the GetDashboardHtml() method in Program.cs with this corrected version:

private static string GetDashboardHtml() => @"
<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>Plex Preroll Manager</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
            min-height: 100vh;
            color: #e2e8f0;
            line-height: 1.6;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background: rgba(15, 23, 42, 0.8);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 40px;
            margin-bottom: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .header h1 {
            color: #f1f5f9;
            font-size: 3em;
            margin-bottom: 10px;
            font-weight: 700;
            letter-spacing: -0.02em;
        }
        .header p {
            color: #94a3b8;
            font-size: 1.1em;
            font-weight: 400;
        }
        .status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .status-card {
            background: rgba(15, 23, 42, 0.8);
            backdrop-filter: blur(20px);
            border-radius: 16px;
            padding: 25px;
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .status-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }
        .status-card h3 {
            color: #f1f5f9;
            margin-bottom: 15px;
            font-size: 1.1em;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 8px;
            box-shadow: 0 0 10px currentColor;
        }
        .status-connected { background-color: #10b981; color: #10b981; }
        .status-disconnected { background-color: #ef4444; color: #ef4444; }
        .categories-section, .upload-section {
            background: rgba(15, 23, 42, 0.8);
            backdrop-filter: blur(20px);
            border-radius: 16px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .categories-section h2, .upload-section h2 {
            color: #f1f5f9;
            font-size: 1.5em;
            font-weight: 600;
            margin-bottom: 20px;
            letter-spacing: -0.01em;
        }
        .categories-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .category-card {
            background: rgba(30, 41, 59, 0.6);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 24px;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            backdrop-filter: blur(10px);
        }
        .category-card:hover {
            border-color: #3b82f6;
            background: rgba(59, 130, 246, 0.1);
            transform: translateY(-2px);
        }
        .category-card.active {
            border-color: #10b981;
            background: rgba(16, 185, 129, 0.1);
            box-shadow: 0 0 20px rgba(16, 185, 129, 0.2);
        }
        .category-card h4 {
            color: #f1f5f9;
            margin-bottom: 12px;
            font-size: 1.2em;
            font-weight: 600;
        }
        .category-stats {
            color: #94a3b8;
            font-size: 0.9em;
            font-weight: 500;
        }
        .btn {
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin: 5px;
            letter-spacing: 0.025em;
        }
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(59, 130, 246, 0.4);
        }
        .btn-secondary {
            background: rgba(71, 85, 105, 0.8);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        .btn-secondary:hover {
            background: rgba(100, 116, 139, 0.8);
            border-color: rgba(255, 255, 255, 0.2);
        }
        .upload-form {
            margin-top: 20px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #f1f5f9;
            font-weight: 600;
            font-size: 0.95em;
        }
        .form-group input, .form-group select {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            font-size: 14px;
            background: rgba(30, 41, 59, 0.6);
            color: #f1f5f9;
            backdrop-filter: blur(10px);
        }
        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
        .form-group input::placeholder {
            color: #64748b;
        }
        .prerolls-list {
            margin-top: 20px;
        }
        .preroll-item {
            background: rgba(30, 41, 59, 0.6);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            backdrop-filter: blur(10px);
        }
        .preroll-info h5 {
            color: #f1f5f9;
            margin-bottom: 6px;
            font-weight: 600;
        }
        .preroll-info small {
            color: #94a3b8;
            font-size: 0.85em;
        }
        .loading {
            text-align: center;
            padding: 40px;
            color: #94a3b8;
            font-style: italic;
        }
        .error {
            background: rgba(239, 68, 68, 0.1);
            color: #fca5a5;
            padding: 16px;
            border-radius: 8px;
            margin: 10px 0;
            border: 1px solid rgba(239, 68, 68, 0.2);
        }
        .success {
            background: rgba(16, 185, 129, 0.1);
            color: #86efac;
            padding: 16px;
            border-radius: 8px;
            margin: 10px 0;
            border: 1px solid rgba(16, 185, 129, 0.2);
        }
        @media (max-width: 768px) {
            .container { padding: 15px; }
            .header { padding: 30px 20px; }
            .header h1 { font-size: 2.2em; }
            .status-grid { grid-template-columns: 1fr; }
            .categories-grid { grid-template-columns: 1fr; }
            .categories-section, .upload-section { padding: 20px; }
        }
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>Plex Preroll Manager</h1>
            <p>Manage your Plex cinema prerolls with ease</p>
        </div>

        <div class='status-grid'>
            <div class='status-card'>
                <h3><span class='status-indicator' id='plexStatus'></span>Plex Server</h3>
                <div id='plexInfo'>Loading...</div>
            </div>
            <div class='status-card'>
                <h3>Statistics</h3>
                <div id='statsInfo'>Loading...</div>
            </div>
            <div class='status-card'>
                <h3>Active Category</h3>
                <div id='activeCategory'>Loading...</div>
            </div>
        </div>

        <div class='categories-section'>
            <h2>Categories</h2>
            <div class='categories-grid' id='categoriesGrid'>
                <div class='loading'>Loading categories...</div>
            </div>
        </div>

        <div class='upload-section'>
            <h2>Upload New Preroll</h2>
            <form class='upload-form' id='uploadForm' enctype='multipart/form-data'>
                <div class='form-group'>
                    <label for='videoFile'>Video File:</label>
                    <input type='file' id='videoFile' name='file' accept='video/*' required>
                </div>
                <div class='form-group'>
                    <label for='category'>Category:</label>
                    <select id='category' name='category' required>
                        <option value='General'>General</option>
                        <option value='Halloween'>Halloween</option>
                        <option value='Christmas'>Christmas</option>
                        <option value='New Year'>New Year</option>
                        <option value='Summer'>Summer</option>
                        <option value='Winter'>Winter</option>
                        <option value='Spring'>Spring</option>
                        <option value='Fall'>Fall</option>
                        <option value='Horror'>Horror</option>
                        <option value='Comedy'>Comedy</option>
                        <option value='Action'>Action</option>
                        <option value='Classic'>Classic</option>
                    </select>
                </div>
                <div class='form-group'>
                    <label for='videoName'>Video Name:</label>
                    <input type='text' id='videoName' name='name' placeholder='Enter video name' required>
                </div>
                <button type='submit' class='btn'>Upload Video</button>
            </form>
        </div>

        <div class='prerolls-list' id='prerollsSection' style='display: none;'>
            <h2>Prerolls in <span id='currentCategory'></span></h2>
            <div id='prerollsGrid'>
                <div class='loading'>Loading prerolls...</div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentCategory = null;

        // Load initial data
        async function loadStatus() {
            try {
                const response = await fetch('/api/status');
                const data = await response.json();

                // Update Plex status
                const plexIndicator = document.getElementById('plexStatus');
                const plexInfo = document.getElementById('plexInfo');
                if (data.PlexConnected) {
                    plexIndicator.className = 'status-indicator status-connected';
                    plexInfo.innerHTML = `<strong>${data.PlexServerName}</strong><br>Connected`;
                } else {
                    plexIndicator.className = 'status-indicator status-disconnected';
                    plexInfo.innerHTML = 'Disconnected';
                }

                // Update stats
                document.getElementById('statsInfo').innerHTML = `Total Prerolls: <strong>${data.TotalPrerolls}</strong>`;
                document.getElementById('activeCategory').innerHTML = `<strong>${data.ActiveCategory}</strong>`;

            } catch (error) {
                console.error('Error loading status:', error);
                showError('Failed to load status information');
            }
        }

        async function loadCategories() {
            try {
                const response = await fetch('/api/categories');
                const categories = await response.json();

                const grid = document.getElementById('categoriesGrid');
                if (categories.length === 0) {
                    grid.innerHTML = '<p>No categories found. Upload some videos to get started!</p>';
                    return;
                }

                grid.innerHTML = categories.map(category => `
                    <div class='category-card ${category.IsActive ? 'active' : ''}' onclick='selectCategory(""${category.Name}"")'>
                        <h4>${category.Name}</h4>
                        <div class='category-stats'>
                            ${category.PrerollCount} video${category.PrerollCount !== 1 ? 's' : ''}<br>
                            ${category.IsActive ? '✅ Active' : 'Inactive'}
                        </div>
                        ${category.IsActive ? '' : `<button class='btn btn-secondary' onclick='event.stopPropagation(); activateCategory(""${category.Name}"")'>Activate</button>`}
                    </div>
                `).join('');

            } catch (error) {
                console.error('Error loading categories:', error);
                document.getElementById('categoriesGrid').innerHTML = '<div class=""error"">Failed to load categories</div>';
            }
        }

        async function selectCategory(categoryName) {
            currentCategory = categoryName;
            document.getElementById('currentCategory').textContent = categoryName;
            document.getElementById('prerollsSection').style.display = 'block';

            try {
                const response = await fetch(`/api/prerolls/${categoryName}`);
                const prerolls = await response.json();

                const grid = document.getElementById('prerollsGrid');
                if (prerolls.length === 0) {
                    grid.innerHTML = '<p>No prerolls in this category yet.</p>';
                    return;
                }

                grid.innerHTML = prerolls.map(preroll => `
                    <div class='preroll-item'>
                        <div class='preroll-info'>
                            <h5>${preroll.Name}</h5>
                            <small>Order: ${preroll.Order} | Size: ${(preroll.FileSizeBytes / 1024 / 1024).toFixed(1)} MB | Added: ${new Date(preroll.CreatedDate).toLocaleDateString()}</small>
                        </div>
                        <button class='btn btn-secondary' onclick='deletePreroll(""${preroll.Id}"")'>Delete</button>
                    </div>
                `).join('');

            } catch (error) {
                console.error('Error loading prerolls:', error);
                document.getElementById('prerollsGrid').innerHTML = '<div class=""error"">Failed to load prerolls</div>';
            }
        }

        async function activateCategory(categoryName) {
            try {
                const response = await fetch(`/api/categories/${categoryName}/activate`, {
                    method: 'POST'
                });

                if (response.ok) {
                    showSuccess(`Category '${categoryName}' activated successfully!`);
                    loadStatus();
                    loadCategories();
                } else {
                    showError('Failed to activate category');
                }
            } catch (error) {
                console.error('Error activating category:', error);
                showError('Failed to activate category');
            }
        }

        async function deletePreroll(prerollId) {
            if (!confirm('Are you sure you want to delete this preroll?')) return;

            try {
                const response = await fetch(`/api/prerolls/${prerollId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showSuccess('Preroll deleted successfully!');
                    if (currentCategory) {
                        selectCategory(currentCategory);
                    }
                    loadCategories();
                } else {
                    showError('Failed to delete preroll');
                }
            } catch (error) {
                console.error('Error deleting preroll:', error);
                showError('Failed to delete preroll');
            }
        }

        // Upload form handler
        document.getElementById('uploadForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = new FormData();
            const fileInput = document.getElementById('videoFile');
            const categorySelect = document.getElementById('category');
            const nameInput = document.getElementById('videoName');

            if (!fileInput.files[0]) {
                showError('Please select a video file');
                return;
            }

            formData.append('file', fileInput.files[0]);
            formData.append('category', categorySelect.value);
            formData.append('name', nameInput.value || fileInput.files[0].name);

            try {
                const response = await fetch('/api/upload', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.Success) {
                    showSuccess('Video uploaded successfully!');
                    document.getElementById('uploadForm').reset();
                    loadCategories();
                    if (currentCategory === categorySelect.value) {
                        selectCategory(currentCategory);
                    }
                } else {
                    showError(result.Error || 'Upload failed');
                }
            } catch (error) {
                console.error('Error uploading file:', error);
                showError('Upload failed');
            }
        });

        // Utility functions
        function showError(message) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error';
            errorDiv.textContent = message;
            document.querySelector('.container').insertBefore(errorDiv, document.querySelector('.container').firstChild);
            setTimeout(() => errorDiv.remove(), 5000);
        }

        function showSuccess(message) {
            const successDiv = document.createElement('div');
            successDiv.className = 'success';
            successDiv.textContent = message;
            document.querySelector('.container').insertBefore(successDiv, document.querySelector('.container').firstChild);
            setTimeout(() => successDiv.remove(), 5000);
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            loadStatus();
            loadCategories();

            // Refresh data every 30 seconds
            setInterval(() => {
                loadStatus();
                loadCategories();
            }, 30000);
        });
    </script>
</body>
</html>";